// <auto-generated />
using System;
using LaBook_Planet.API.Library.Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LaBook_Planet.API.Migrations
{
    [DbContext(typeof(LaBookContextApi))]
    [Migration("20230827220307_AddRatingToBook")]
    partial class AddRatingToBook
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LaBook_Planet.API.Library.Domain.Models.Book", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfPages")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalCopies")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = "161F9CDC-D44B-4D7F-BC50-C6C319988475",
                            Author = "Astrid Lindgren",
                            AvailableCopies = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatePublished = new DateTime(2013, 9, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            GenreId = "",
                            ISBN = "9789129688313",
                            Image = "",
                            ImageUrl = "/images/lejonhjärta.jpg",
                            Language = "Swedish",
                            NumOfPages = 0,
                            Price = 139,
                            RatingValue = 0,
                            Title = "God's General",
                            TotalCopies = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "336BB8ED-54C8-4289-9A54-2712EF6DFC5B",
                            Author = "J. R. R. Tolkien",
                            AvailableCopies = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatePublished = new DateTime(1991, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            GenreId = "",
                            ISBN = "9780261102354",
                            Image = "",
                            ImageUrl = "/images/lotr.jpg",
                            Language = "English",
                            NumOfPages = 0,
                            Price = 100,
                            RatingValue = 0,
                            Title = "Entrapment",
                            TotalCopies = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "230CCB0F-42A2-454A-94CD-A4719C4E1D1E",
                            Author = "Dennis Lehane",
                            AvailableCopies = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatePublished = new DateTime(2011, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            GenreId = "",
                            ISBN = "9780062068408",
                            Image = "",
                            ImageUrl = "/images/mystic-river.jpg",
                            Language = "English",
                            NumOfPages = 0,
                            Price = 91,
                            RatingValue = 0,
                            Title = "Rich Dad, Poor Dad",
                            TotalCopies = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "76DF0F9F-9898-44BF-9551-DA1F0DB1C260",
                            Author = "John Steinbeck",
                            AvailableCopies = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatePublished = new DateTime(1994, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            GenreId = "",
                            ISBN = "9780062068408",
                            Image = "",
                            ImageUrl = "/images/of-mice-and-men.jpg",
                            Language = "English",
                            NumOfPages = 0,
                            Price = 166,
                            RatingValue = 0,
                            Title = "",
                            TotalCopies = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "CB8FCB1D-4DD3-489A-AE73-E59B4EC72AE5",
                            Author = "Ernest Hemingway",
                            AvailableCopies = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatePublished = new DateTime(1994, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            GenreId = "",
                            ISBN = "9780062068408",
                            Image = "",
                            ImageUrl = "/images/old-man-and-the-sea.jpg",
                            Language = "English",
                            NumOfPages = 0,
                            Price = 84,
                            RatingValue = 0,
                            Title = "The Old Man and the Sea",
                            TotalCopies = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "4536431E-0888-4A8F-BA10-011ACB39E690",
                            Author = "Cormac McCarthy",
                            AvailableCopies = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatePublished = new DateTime(2007, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            GenreId = "",
                            ISBN = "9780307386458",
                            Image = "",
                            ImageUrl = "/images/the-road.jpg",
                            Language = "English",
                            NumOfPages = 0,
                            Price = 95,
                            RatingValue = 0,
                            Title = "The Road",
                            TotalCopies = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("LaBook_Planet.API.Library.Domain.Models.CartItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("LaBook_Planet.API.Library.Domain.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("LaBook_Planet.API.Library.Domain.Models.Genre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("LaBook_Planet.API.Library.Domain.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("LaBook_Planet.API.Library.Domain.Models.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("BookId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("OrderId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId1");

                    b.HasIndex("OrderId1");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("LaBook_Planet.API.Library.Domain.Models.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Rating")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("LaBook_Planet.API.Library.Domain.Models.Book", b =>
                {
                    b.HasOne("LaBook_Planet.API.Library.Domain.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("LaBook_Planet.API.Library.Domain.Models.CartItem", b =>
                {
                    b.HasOne("LaBook_Planet.API.Library.Domain.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LaBook_Planet.API.Library.Domain.Models.Genre", b =>
                {
                    b.HasOne("LaBook_Planet.API.Library.Domain.Models.Category", "Category")
                        .WithMany("Genres")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LaBook_Planet.API.Library.Domain.Models.OrderItem", b =>
                {
                    b.HasOne("LaBook_Planet.API.Library.Domain.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaBook_Planet.API.Library.Domain.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId1");

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("LaBook_Planet.API.Library.Domain.Models.Review", b =>
                {
                    b.HasOne("LaBook_Planet.API.Library.Domain.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LaBook_Planet.API.Library.Domain.Models.Book", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("LaBook_Planet.API.Library.Domain.Models.Category", b =>
                {
                    b.Navigation("Genres");
                });

            modelBuilder.Entity("LaBook_Planet.API.Library.Domain.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LaBook_Planet.API.Library.Domain.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
